---
import BaseLayout from "src/layouts/BaseLayout.astro";
import CTA from "@components/CTA.astro";
import TeamSection from "@components/TeamSection.astro";
import BoardSection from "@components/BoardSection.astro";
import { getCollection } from 'astro:content';

// Get data from content collections
const teamMembers = await getCollection('team');
const boardMembers = await getCollection('board');
const ourOhanaContent = await getCollection('ourOhana');
const ourOhanaPage = ourOhanaContent[0];

// Sort by order field if provided
const sortedTeamMembers = teamMembers.sort((a, b) => (a.data.order || 99) - (b.data.order || 99));
const sortedBoardMembers = boardMembers.sort((a, b) => (a.data.order || 99) - (b.data.order || 99));

// Format the data to match your component expectations
const formattedTeamMembers = sortedTeamMembers.map(member => ({
  name: member.data.name,
  jobTitle: member.data.jobTitle,
  bio: member.data.bio,
  imageUrl: member.data.image.src,
  imageAlt: member.data.name
}));

const formattedBoardMembers = sortedBoardMembers.map(member => ({
  name: member.data.name,
  jobTitle: member.data.jobTitle,
  bio: member.data.bio,
  imageUrl: member.data.image.src,
  imageAlt: member.data.name,
  link: member.data.link
}));
---

<BaseLayout
  title="Our Ohana"
  description="Meta description for the page"
>
  <TeamSection 
    id="team-section"
    title="Our Team" 
    members={formattedTeamMembers} 
  />

   <!-- ============================================ -->
<!--                  Gallery                     -->
<!-- ============================================ -->

<section id="gallery-2234" style="margin-top: -5rem;">
    <div class="cs-container">
        <div class="cs-content">
            <div class="cs-flex">
                <span class="cs-topper">We mahalo the following former team members for their hard work and dedication:</span>
              <!--  <h2 class="cs-title">Capturing Precious Moments of Your Dream Wedding</h2> -->
                <p class="cs-text"><br><br>
                 <p class="cs-text">
          {ourOhanaPage.data.formerTeam.split('\n\n').map((paragraph) => (
            <>{paragraph}<br /><br /></>
          ))}
        </p>
            </div>
        </div>
        <div class="cs-image-group">
            <!-- Wrap each image in an anchor tag with data-lightbox attribute -->
            <a href="/assets/images/former-team/Hacbed-1.jpg" class="cs-picture cs-picture-1" data-lightbox="gallery" aria-label="View larger image">
                <img loading="lazy" decoding="async" src="/assets/images/former-team/Hacbed-1.jpg" alt="former hacbed team members" width="380" height="271">
            </a>
            <a href="/assets/images/former-team/Hacbed-2.jpg" class="cs-picture cs-picture-2" data-lightbox="gallery" aria-label="View larger image">
                <img loading="lazy" decoding="async" src="/assets/images/former-team/Hacbed-2.jpg" alt="former hacbed team members" width="380" height="271">
            </a>
            <a href="/assets/images/former-team/Hacbed-3.jpg" class="cs-picture cs-picture-3" data-lightbox="gallery" aria-label="View larger image">
                <img loading="lazy" decoding="async" src="/assets/images/former-team/Hacbed-3.jpg" alt="former hacbed team members" width="380" height="271">
            </a>
           <a href="/assets/images/former-team/Hacbed-4.jpg" class="cs-picture cs-picture-4" data-lightbox="gallery" aria-label="View larger image">
                <img loading="lazy" decoding="async" src="/assets/images/former-team/Hacbed-4.jpg" alt="former hacbed team members" width="380" height="271">
            </a>
            <a href="/assets/images/former-team/Hacbed-5.jpg" class="cs-picture cs-picture-5" data-lightbox="gallery" aria-label="View larger image">
                <img loading="lazy" decoding="async" src="/assets/images/former-team/Hacbed-5.jpg" alt="former hacbed team members" width="380" height="271">
            </a>
           <a href="/assets/images/former-team/Hacbed-6.jpg" class="cs-picture cs-picture-6" data-lightbox="gallery" aria-label="View larger image">
                <img loading="lazy" decoding="async" src="/assets/images/former-team/Hacbed-6.jpg" alt="former hacbed team members" width="380" height="271">
            </a>
            <a href="/assets/images/former-team/Hacbed-7.jpg" class="cs-picture cs-picture-7" data-lightbox="gallery" aria-label="View larger image">
                <img loading="lazy" decoding="async" src="/assets/images/former-team/Hacbed-7.jpg" alt="former hacbed team members" width="380" height="271">
            </a>
            <a href="/assets/images/former-team/Hacbed-8.jpg" class="cs-picture cs-picture-8" data-lightbox="gallery" aria-label="View larger image">
                <img loading="lazy" decoding="async" src="/assets/images/former-team/Hacbed-8.jpg" alt="former hacbed team members" width="380" height="271">
            </a>
            <a href="/assets/images/former-team/Hacbed-9.jpg" class="cs-picture cs-picture-9" data-lightbox="gallery" aria-label="View larger image">
                <img loading="lazy" decoding="async" src="/assets/images/former-team/Hacbed-9.jpg" alt="former hacbed team members" width="380" height="271">
            </a>
            <a href="/assets/images/former-team/Hacbed-10.jpg" class="cs-picture cs-picture-10" data-lightbox="gallery" aria-label="View larger image">
                <img loading="lazy" decoding="async" src="/assets/images/former-team/Hacbed-10.jpg" alt="former hacbed team members" width="380" height="271">
            </a>
        </div>
    </div>
    
    <!-- Lightbox container -->
    <div id="lightbox" class="lightbox">
        <div class="lightbox-content">
            <span class="close">&times;</span>
            <img id="lightbox-img" src="" alt="Lightbox image">
        </div>
    </div>
</section>
    
  <BoardSection 
    id="board-section"
    title="Our Board" 
    members={formattedBoardMembers} 
  />

  <section id="gallery-2234" style="margin-top: -5rem;">
    <div class="cs-container">
        <div class="cs-content">
            <div class="cs-flex">
                <span class="cs-topper">We mahalo the following former board members for their invaluable guidance and support:<br><br><br></span>
              <!--  <h2 class="cs-title">Capturing Precious Moments of Your Dream Wedding</h2> -->
               <p class="cs-text">
          {ourOhanaPage.data.formerBoard.split('\n\n').map((paragraph) => (
            <>{paragraph}<br /><br /></>
          ))}
        </p>
            </div>
        </div>
      </section>
                                
  <CTA />
</BaseLayout>

<style lang="less">
  /* PAGE-SPECIFIC STYLES FOR THE PAGE */

  /*-- -------------------------- -->
<---          Gallery           -->
<--- -------------------------- -*/

/* Mobile */
@media only screen and (min-width: 0rem) {
    #gallery-2234 {
        padding: var(--sectionPadding);
        background-color: #fff;

        .cs-container {
            width: 100%;
            max-width: (1920/16rem);
            margin: auto;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: clamp(1rem, 2vw, 1.5rem);
        }

        .cs-content {
            width: 100%;
            max-width: (1280/16rem);
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            gap: (8/16rem);
            /* Added margin to reduce space after content */
            margin-bottom: -0.5rem;
        }

        .cs-title {
            margin: 0;
            font-size: clamp(1.5rem, 5vw, 2rem);
        }


        .cs-image-group {
            width: 90%;
            height: auto;
            display: grid;
            grid-template-columns: repeat(10, 1fr);
            /* INCREASED HEIGHT: 50px - 80px (was 30px - 60px) */
            grid-auto-rows: clamp(4.375rem, 8vw, 7.5rem);
            /* Small gap for compact layout */
            gap: clamp(0.15rem, 0.4vw, 0.4rem);
            margin-bottom: 1rem;
        }

        .cs-picture {
            display: block;
            position: relative;
            cursor: pointer;
            overflow: hidden;
            transition: transform 0.3s ease;

            &:hover {
                transform: scale(1.02);
            }

            img {
                width: 100%;
                height: 100%;
                object-fit: cover;
                position: absolute;
                top: 0;
                left: 0;
            }
        }

         .cs-flex {
            width: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        .cs-topper {
            width: 100%;
            max-width: 100%;
            text-align: center;
            font-size: 1rem;
        }

        .cs-text {
            width: 100%;
            max-width: 100%;
            text-align: center;
            font-size: 1rem;
        }

        /* Layout for 10 images in a compact grid */
        .cs-picture-1 {
            grid-column: span 2;
            grid-row: span 1;
        }

        .cs-picture-2 {
            grid-column: span 2;
            grid-row: span 1;
        }

        .cs-picture-3 {
            grid-column: span 2;
            grid-row: span 1;
        }

        .cs-picture-4 {
            grid-column: span 2;
            grid-row: span 1;
        }

        .cs-picture-5 {
            grid-column: span 2;
            grid-row: span 1;
        }

        .cs-picture-6 {
            grid-column: span 2;
            grid-row: span 1;
        }

        .cs-picture-7 {
            grid-column: span 2;
            grid-row: span 1;
        }

        .cs-picture-8 {
            grid-column: span 2;
            grid-row: span 1;
        }

        .cs-picture-9 {
            grid-column: span 2;
            grid-row: span 1;
        }

        .cs-picture-10 {
            grid-column: span 2;
            grid-row: span 1;
        }

        /* Lightbox styles */
        .lightbox {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.9);
        }

        .lightbox-content {
            position: relative;
            margin: auto;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            max-width: 90%;
        }

        #lightbox-img {
            max-height: 90vh;
            max-width: 90vw;
            object-fit: contain;
        }

        .close {
            position: absolute;
            top: 15px;
            right: 35px;
            color: #f1f1f1;
            font-size: 40px;
            font-weight: bold;
            transition: 0.3s;
            cursor: pointer;
            z-index: 1001;
        }

        .close:hover,
        .close:focus {
            color: #bbb;
            text-decoration: none;
            cursor: pointer;
        }
    }
}

/* Tablet */
@media only screen and (min-width: 48rem) {
    #gallery-2234 {
        .cs-container {
            align-items: center;
        }

        .cs-content {
            flex-direction: row;
            justify-content: space-between;
            align-items: flex-end;
        }

         .cs-text {
            max-width: 100%;
            text-align: center;
        }

        .cs-flex {
            width: 100%;
            min-width: 100%;
            text-align: center;
        }

        /* For tablet, we can have a more dynamic layout */
        .cs-image-group {
            /* Using 20 columns for more flexibility */
            grid-template-columns: repeat(20, 1fr);
        }

        .cs-picture-1 {
            grid-column: span 4;
            grid-row: span 1;
        }

        .cs-picture-2 {
            grid-column: span 4;
            grid-row: span 1;
        }

        .cs-picture-3 {
            grid-column: span 4;
            grid-row: span 1;
        }

        .cs-picture-4 {
            grid-column: span 4;
            grid-row: span 1;
        }

        .cs-picture-5 {
            grid-column: span 4;
            grid-row: span 1;
        }

        .cs-picture-6 {
            grid-column: span 4;
            grid-row: span 1;
        }

        .cs-picture-7 {
            grid-column: span 4;
            grid-row: span 1;
        }

        .cs-picture-8 {
            grid-column: span 4;
            grid-row: span 1;
        }

        .cs-picture-9 {
            grid-column: span 4;
            grid-row: span 1;
        }

        .cs-picture-10 {
            grid-column: span 4;
            grid-row: span 1;
        }
    }
}
                                
</style>

<script is:inline>
// Use a self-executing function to avoid global scope pollution
(function() {
  // Define the initialization function at the top level
  window.initGalleryLightbox = function() {
    console.log("[GALLERY] Running gallery lightbox initialization");
    setupLightbox();
  };

  // Set up the main listeners with minimal code
  document.addEventListener('astro:page-load', function() {
    console.log("[GALLERY] 'astro:page-load' event fired");
    window.initGalleryLightbox();
  });

  document.addEventListener('astro:after-swap', function() {
    console.log("[GALLERY] 'astro:after-swap' event fired");
    // Wait for DOM to be fully updated
    setTimeout(window.initGalleryLightbox, 100);
  });

  // For direct navigation without transitions
  if (document.readyState === 'complete' || document.readyState === 'interactive') {
    console.log("[GALLERY] Document already loaded, initializing now");
    setTimeout(window.initGalleryLightbox, 10);
  } else {
    document.addEventListener('DOMContentLoaded', function() {
      console.log("[GALLERY] DOMContentLoaded event fired");
      window.initGalleryLightbox();
    });
  }

  // Setup Lightbox functionality
  function setupLightbox() {
    console.log("[GALLERY] Setting up lightbox");
    
    // Check if elements exist before proceeding
    const lightbox = document.getElementById("lightbox");
    if (!lightbox) {
      console.log("[GALLERY] No lightbox found on this page");
      return;
    }
    
    const lightboxImg = document.getElementById("lightbox-img");
    const closeBtn = document.querySelector(".close");
    
    if (!lightboxImg || !closeBtn) {
      console.log("[GALLERY] Missing required lightbox elements");
      return;
    }
    
    // Get all gallery images with data-lightbox attribute
    const galleryImages = document.querySelectorAll("[data-lightbox='gallery']");
    console.log(`[GALLERY] Found ${galleryImages.length} gallery images`);
    
    // Open lightbox when gallery image is clicked
    galleryImages.forEach(function(image, index) {
      console.log(`[GALLERY] Processing gallery image ${index + 1}`);
      
      // Remove existing event listeners before adding new ones
      image.removeEventListener('click', handleGalleryImageClick);
      image.addEventListener('click', handleGalleryImageClick);
    });
    
    // Set up close button event
    closeBtn.removeEventListener('click', handleCloseBtnClick);
    closeBtn.addEventListener('click', handleCloseBtnClick);
    
    // Set up lightbox click event - IMPORTANT CHANGE: Now we use document.body for the click event
    // This ensures we catch all clicks anywhere on the page when lightbox is open
    document.body.removeEventListener('click', handleBodyClick);
    document.body.addEventListener('click', handleBodyClick);
    
    // Set up escape key event (only once)
    if (!window.lightboxKeyHandlerAdded) {
      document.addEventListener('keydown', handleLightboxKeyPress);
      window.lightboxKeyHandlerAdded = true;
    }
  }
  
  // Named functions for event handlers
  function handleGalleryImageClick(e) {
    e.preventDefault();
    e.stopPropagation();
    
    const imgSrc = this.getAttribute('href');
    console.log(`[GALLERY] Gallery image clicked: ${imgSrc}`);
    
    const lightbox = document.getElementById("lightbox");
    const lightboxImg = document.getElementById("lightbox-img");
    
    if (!lightbox || !lightboxImg) {
      console.error("[GALLERY] Cannot find lightbox elements");
      return;
    }
    
    lightboxImg.src = imgSrc;
    lightbox.style.display = "block";
    document.body.style.overflow = "hidden"; // Prevent scrolling when lightbox is open
  }
  
  function handleCloseBtnClick(e) {
    e.preventDefault();
    e.stopPropagation();
    console.log("[GALLERY] Close button clicked");
    closeLightbox();
  }
  
  // New function to handle clicks anywhere on the body when lightbox is open
  function handleBodyClick(e) {
    const lightbox = document.getElementById("lightbox");
    
    // Only process if lightbox is visible
    if (lightbox && lightbox.style.display === "block") {
      // Check if the click is on a gallery image (to prevent immediate closing after opening)
      const isGalleryImageClick = e.target.closest('[data-lightbox="gallery"]');
      
      if (!isGalleryImageClick) {
        console.log("[GALLERY] Click detected while lightbox is open");
        closeLightbox();
      }
    }
  }
  
  function handleLightboxKeyPress(e) {
    const lightbox = document.getElementById("lightbox");
    if (e.key === 'Escape' && lightbox && lightbox.style.display === 'block') {
      console.log("[GALLERY] Escape key pressed while lightbox active");
      closeLightbox();
    }
  }
  
  // Lightbox close function
  function closeLightbox() {
    console.log("[GALLERY] Closing lightbox");
    const lightbox = document.getElementById("lightbox");
    
    if (lightbox) {
      lightbox.style.display = "none";
      document.body.style.overflow = "auto"; // Re-enable scrolling
    }
  }
})();
</script>


