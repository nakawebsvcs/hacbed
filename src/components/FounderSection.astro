---
// FounderSection.astro
import Founder from "./Founder.astro";

export interface FounderData {
  name: string;
  bio: string;
  imageUrl: string;
  imageAlt?: string;
  video?: string;
  videoCaption?: string;
}

export interface Props {
  id?: string;
  title: string;
  founders: FounderData[];
  topper?: string;
}

const { id, title, founders, topper } = Astro.props;
---

<section id={id}>
  <div class="cs-container">
    <div class="cs-content">
      {topper && <span class="cs-topper">{topper}</span>}
      <h2 class="cs-title">{title}</h2>
    </div>
    <ul class="cs-card-group">
      {
        founders.map((founder) => (
          <Founder
            name={founder.name}
            bio={founder.bio}
            imageUrl={founder.imageUrl}
            imageAlt={founder.imageAlt}
            video={founder.video}
            videoCaption={founder.videoCaption}
          />
        ))
      }
    </ul>
  </div>

  <!-- Video Lightbox HTML Structure -->
  <div class="video-lightbox-overlay">
    <div class="video-lightbox-container">
      <button class="video-lightbox-close" aria-label="Close video"
        >&times;</button
      >
      <div class="video-lightbox-content"></div>
      <div class="video-lightbox-caption"></div>
    </div>
  </div>
</section>

<style lang="less" is:global>
  /*-- -------------------------- -->
<---         Founder Section          -->
<--- -------------------------- -*/

  /* Mobile - 360px */
  @media only screen and (min-width: 0rem) {
    #founder-section {
      text-align: center;
      padding: var(--sectionPadding);
      margin-top: 4rem;

      .cs-container {
        width: 100%;
        max-width: (550/16rem);
        margin: auto;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: clamp(3rem, 6vw, 4rem);
      }

      .cs-content {
        text-align: center;
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      .cs-title {
        color: var(--secondary);
      }

      .cs-card-group {
        width: 100%;
        max-width: (955/16em);
        padding: 0;
        margin: 0 auto;
        margin-bottom: clamp(1.5rem, 3vw, 2.5rem);
        display: flex;
        justify-content: center;
        align-items: center;
        flex-wrap: wrap;
        column-gap: clamp(0.5rem, 1.5vw, 1.25rem);
        row-gap: (24/16rem); /* Increased row gap for vertical stacking */
      }

      .cs-item {
        list-style: none;
        width: 95%; /* Wider cards on mobile */
        max-width: (500/16rem); /* Control maximum width */
        padding-bottom: (24/16rem);
        border-radius: (12/16rem);
        background-color: #fff;
        box-shadow: 0px 24px 54px rgba(87, 107, 147, 0.12);
        border: 1px solid #b4b2c7;
        position: relative;

        &:before {
          /* hover box */
          content: "";
          width: 99%;
          height: 99%;
          border: 4px solid var(--primary);
          border-radius: (12/16rem);
          background: transparent;
          pointer-events: none;
          opacity: 0;
          position: absolute;
          display: block;
          z-index: 10;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          transition:
            transform 0.3s,
            width 0.3s,
            height 0.3s,
            opacity 0.3s;
        }

        &:hover {
          &:before {
            opacity: 1;
          }
          .cs-picture {
            img {
              transform: scale(1.1);
            }
          }
        }

        /* Card expanded state */
        &.expanded {
          .cs-bio {
            max-height: 800px;
            opacity: 1;
            margin-bottom: 1rem;
          }

          .cs-read-more {
            &:after {
              content: "Read Less";
            }
          }

          .cs-bio-video {
            max-height: 50px;
            opacity: 1;
            margin-bottom: 1rem;
          }
        }
      }

      .cs-picture {
        width: 100%;
        max-width: (120/16rem);
        aspect-ratio: 1/1;
        margin-bottom: (24/16rem);
        margin: 1rem auto (24/16rem) auto;
        overflow: hidden;
        border-radius: 50%;
        border-bottom: 1px solid #b4b2c7;
        position: relative;
        display: block;

        img {
          position: absolute;
          top: 0;
          left: 0;
          height: 100%;
          width: 100%;
          object-fit: cover;
          object-position: top;
          transition: transform 0.6s;
        }
      }

      .cs-name {
        font-size: clamp(1rem, 2vw, 1.5625rem);
        line-height: 1.2em;
        font-weight: 700;
        margin-bottom: (4/16rem);
        color: var(--headerColor);
        display: block;
      }

      .cs-job {
        font-size: clamp(0.875rem, 1.5vw, 1rem);
        line-height: 1.5em;
        color: var(--secondary);
        display: block;
      }

      .cs-bio {
        font-size: clamp(0.875rem, 1.5vw, 1rem);
        line-height: 1.5em;
        color: var(--bodyTextColor);
        margin-top: 0.75rem;
        padding: 0 1rem;
        display: block;
        /* Initially collapsed */
        max-height: 0;
        opacity: 0;
        overflow: hidden;
        transition:
          max-height 0.5s ease,
          opacity 0.5s ease,
          margin 0.5s ease;
      }

      .cs-bio-video {
        display: flex;
        justify-content: center;
        margin-top: 0.5rem;
        max-height: 0;
        opacity: 0;
        overflow: hidden;
        transition:
          max-height 0.5s ease,
          opacity 0.5s ease;
      }

      .cs-link {
        display: inline-block;
        transition: transform 0.3s ease;

        &:hover {
          transform: scale(1.1);
        }
      }

      .cs-read-more {
        display: inline-block;
        margin-top: 0.5rem;
        color: var(--secondary);
        font-weight: bold;
        cursor: pointer;
        font-size: 0.875rem;
        background-color: transparent;
        border: 1px solid #e0e0e0;
        border-radius: 4px;
        padding: 0.25rem 0.75rem;

        &:after {
          content: "Read More";
        }

        &:hover {
          text-decoration: underline;
        }
      }
    }
  }

  /* Tablet - 600px */
  @media only screen and (min-width: 37.5rem) {
    #founder-section {
      .cs-container {
        max-width: (1280/16rem);
      }

      .cs-card-group {
        flex-wrap: wrap;
        justify-content: center;
        column-gap: clamp(1rem, 2vw, 2rem);
        row-gap: clamp(1.5rem, 3vw, 2rem);
      }

      .cs-item {
        /* Back to multiple cards per row */
        width: calc(50% - 1rem); /* 2 cards per row on medium screens */
        max-width: (350/16rem);
      }
    }
  }
  /* Desktop - 1024px+ */
  @media only screen and (min-width: 64rem) {
    #founder-section {
      .cs-card-group {
        column-gap: clamp(1.5rem, 3vw, 3rem);
        row-gap: clamp(2rem, 4vw, 3rem);
        flex-wrap: wrap;
        max-width: (1200/16rem);
        justify-content: center;
      }

      .cs-item {
        width: calc(33.33% - 2rem);
        min-width: (350/16rem);
        max-width: (400/16rem);
        flex: 0 1 auto;
      }
    }
  }

  /*-- -------------------------- -->
<---      Video Lightbox     -->
<--- -------------------------- -*/

  /* Video Lightbox Styles */
  .video-lightbox-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    padding: 40px 20px; /* Add padding to ensure content isn't flush with edges */
  }

  .video-lightbox-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  .video-lightbox-container {
    position: relative;
    width: 80%;
    max-width: 900px;
    aspect-ratio: 16/9;
    margin-top: 70px; /* Add margin to push content down and make room for close button */
  }

  .video-lightbox-content {
    width: 100%;
    height: 100%;
    background-color: #000; /* Add background color to content area */
  }

  .video-lightbox-caption {
    color: white;
    text-align: center;
    padding: 10px 0;
    font-style: italic;
    margin-top: 10px;
    display: block;
    width: 100%;
    position: relative;
    z-index: 10;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .video-lightbox-close {
    position: absolute;
    top: -40px;
    right: 0;
    background: none;
    border: none;
    color: white;
    font-size: 30px;
    cursor: pointer;
    z-index: 10;
    width: 40px; /* Add explicit width */
    height: 40px; /* Add explicit height */
    line-height: 40px; /* Center the × vertically */
    text-align: center; /* Center the × horizontally */
    text-shadow: 0 0 5px rgba(0, 0, 0, 0.5); /* Add shadow for better visibility */
    display: block; /* Ensure it's displayed as a block element */
  }
</style>

<script>
  // This script uses the 'astro:page-load' event which fires on initial page load AND after view transitions
  document.addEventListener('astro:page-load', () => {
    console.log("Page loaded or transitioned, initializing functionality...");
    initializeFounderSection();
    initializeVideoLightbox();
  });
  
  // We also need to set up a 'astro:after-swap' listener for View Transitions
  document.addEventListener('astro:after-swap', () => {
    console.log("View transition completed, reinitializing functionality...");
    // Wait a moment for the DOM to be fully updated
    setTimeout(() => {
      initializeFounderSection();
      initializeVideoLightbox();
    }, 50);
  });
  
  // Extract the founder section functionality into a reusable function
  function initializeFounderSection() {
    const sectionId = document.querySelector('#founder-section') ? 'founder-section' : 'board-section';
    if (!document.querySelector(`#${sectionId}`)) {
      console.log(`Section #${sectionId} not found in current page`);
      return;
    }
    
    console.log(`Initializing founder section #${sectionId}`);
    const readMoreButtons = document.querySelectorAll(`#${sectionId} .cs-read-more`);
    console.log(`Found ${readMoreButtons.length} Read More buttons`);
    
    // Remove existing event listeners (to avoid duplicates)
    readMoreButtons.forEach(button => {
      const newButton = button.cloneNode(true);
      button.parentNode.replaceChild(newButton, button);
      
      // Add new event listener to the cloned button
      newButton.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log("Read More button clicked");
        
        // Find the parent item and toggle its expanded state
        const parentItem = newButton.closest('.cs-item');
        if (parentItem) {
          parentItem.classList.toggle('expanded');
          console.log("Toggled expanded state on parent item");
        }
      });
    });
  }
  
  // Extract the video lightbox functionality into a reusable function
  function initializeVideoLightbox() {
    console.log("Video Lightbox: Initializing...");
    // Get references to the existing lightbox elements
    const overlay = document.querySelector(".video-lightbox-overlay");
    const container = document.querySelector(".video-lightbox-container");
    const content = document.querySelector(".video-lightbox-content");
    const caption = document.querySelector(".video-lightbox-caption");
    const closeBtn = document.querySelector(".video-lightbox-close");

    // Check if all elements exist (we might be on a page without the lightbox)
    if (!overlay || !container || !content || !caption || !closeBtn) {
      console.log("Video Lightbox: Required elements not found in the DOM");
      return;
    }
    
    // Get all video links
    const videoLinks = document.querySelectorAll(".cs-bio-video .cs-link");
    console.log(`Video Lightbox: Found ${videoLinks.length} video links`);
    
    // Clean up existing event listeners to prevent duplicates
    const newCloseBtn = closeBtn.cloneNode(true);
    closeBtn.parentNode.replaceChild(newCloseBtn, closeBtn);
    
    // Set up event listeners for closing
    newCloseBtn.addEventListener("click", (e) => {
      e.preventDefault();
      e.stopPropagation();
      closeLightbox();
      console.log("Close button clicked");
    });
    
    // Remove existing event listener on overlay (using clone and replace technique)
    const newOverlay = overlay.cloneNode(false);
    while (overlay.firstChild) {
      newOverlay.appendChild(overlay.firstChild);
    }
    overlay.parentNode.replaceChild(newOverlay, overlay);
    
    // Add new event listener to the cloned overlay
    newOverlay.addEventListener("click", (e) => {
      if (e.target === newOverlay) {
        closeLightbox();
        console.log("Overlay clicked");
      }
    });
    
    // For global event listeners, we need to be careful to avoid duplicates
    // We'll use a one-time setup flag in window object
    if (!window.escKeyListenerSetup) {
      document.addEventListener("keydown", (e) => {
        const currentOverlay = document.querySelector(".video-lightbox-overlay");
        if (e.key === "Escape" && currentOverlay && currentOverlay.classList.contains("active")) {
          closeLightbox();
          console.log("Escape key pressed");
        }
      });
      window.escKeyListenerSetup = true;
    }
    
    // Clean up existing video link event listeners
    videoLinks.forEach((link) => {
      const newLink = link.cloneNode(true);
      link.parentNode.replaceChild(newLink, link);
      
      // Add new event listener to the cloned link
      newLink.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        const videoUrl = newLink.getAttribute("href");
        const captionText = newLink.getAttribute("data-caption") || "";
        console.log(`Video Lightbox: Opening video ${videoUrl}`);
        console.log(`Video Lightbox: Caption: "${captionText}"`);
        openLightbox(videoUrl, captionText);
      });
    });
    
    function openLightbox(videoUrl, captionText) {
      // Ensure we have the latest reference to elements
      const currentOverlay = document.querySelector(".video-lightbox-overlay");
      const currentContent = document.querySelector(".video-lightbox-content");
      const currentCaption = document.querySelector(".video-lightbox-caption");
      
      // Clear previous content
      currentContent.innerHTML = "";
      
      // Create and add iframe
      const iframe = document.createElement("iframe");
      iframe.src = videoUrl;
      iframe.setAttribute("frameborder", "0");
      iframe.setAttribute("allowfullscreen", "true");
      iframe.setAttribute("width", "100%");
      iframe.setAttribute("height", "100%");
      currentContent.appendChild(iframe);
      
      // Update caption
      currentCaption.textContent = captionText || "";
      currentCaption.style.display = captionText ? "block" : "none";
      
      // Show lightbox
      currentOverlay.classList.add("active");
      document.body.style.overflow = "hidden";
      console.log("Video Lightbox: Opened");
    }
    
    function closeLightbox() {
      // Ensure we have the latest reference to elements
      const currentOverlay = document.querySelector(".video-lightbox-overlay");
      const currentContent = document.querySelector(".video-lightbox-content");
      const currentCaption = document.querySelector(".video-lightbox-caption");
      
      if (currentOverlay) currentOverlay.classList.remove("active");
      document.body.style.overflow = "";
      if (currentContent) currentContent.innerHTML = "";
      if (currentCaption) currentCaption.textContent = "";
      console.log("Video Lightbox: Closed");
    }
  }
</script>